{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"con",
				"configurationMethods	(attribute, instance)"
			],
			[
				"w",
				"words	(local, instance)"
			],
			[
				"conf",
				"configureParameter"
			],
			[
				"confi",
				"configureMediaType"
			],
			[
				"pr",
				"print	(builtin, function)"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import select\nimport socket\nimport sys\n\n\n'''\nPolling Server\n'''\n\n\nclass Server:\n    '''\n    *** initializer ***\n    '''\n    def __init__(self, port):\n        self.configMethods = {\n        }\n\n        # load the configuration file\n        #self.loadConfiguration()\n\n        self.host = \"\"\n        self.port = port\n\n        # open the socket\n        self.open_socket()\n\n        # prepare the dictionary of clients\n        self.clients = {}\n\n        self.size = 1024\n\n    '''\n    read the server configuration from the 'web.conf' file in the local\n    directory\n    '''\n    def loadConfiguration(self):\n        with open(\"web.conf\", 'r') as config_file:\n            for line in iter(config_file):\n                # strip the trailing EOL char(S)\n                line = line.lower().strip('\\n\\r')\n\n                # split the string into words (delimited by whitespace)\n                words = line.split()\n                if len(words) <= 0:\n                    continue\n\n                # invoke the proper method based on the keyword\n                keyword = words[0]\n                if keyword in self.configMethods:\n                    getattr(self, self.configMethods[keyword])(words[1:])\n\n    def addDomain(self, *args):\n        print \"adding domain\" + str(args)\n\n    def addMedia(self, *args):\n        print \"adding media type\" + str(args)\n\n    def addParameter(self, *args):\n        print \"adding parameter\" + str(args)\n\n    '''\n    Set up the socket for incoming clients\n    '''\n    def open_socket(self):\n        try:\n            self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            self.server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            self.server.bind((self.host, self.port))\n            self.server.listen(5)\n        except socket.error, (value, message):\n            if self.server:\n                self.server.close()\n            print \"Could not open socket: \" + message\n            sys.exit(1)\n\n    '''\n    Use poll() to handle each incoming client\n    '''\n    def run(self):\n        self.poller = select.epoll()\n        self.pollmask = select.EPOLLIN | select.EPOLLHUP | select.EPOLLERR\n        self.poller.register(self.server, self.pollmask)\n        while True:\n            # poll sockets\n            try:\n                sockets = self.poller.poll(timeout=1)\n            except:\n                return\n\n            for (socket, event) in sockets:\n                # handle errors\n                if event & (select.POLLHUP | select.POLLERR):\n                    self.handleError(socket)\n                    continue\n\n                # handle the server socket\n                if socket == self.server.fileno():\n                    self.handleServer()\n                    continue\n\n                # handle client socket\n                self.handleClient(socket)\n\n    '''\n    Handle error condition\n    '''\n    def handleError(self, socket):\n        self.poller.unregister(socket)\n        if socket == self.server.fileno():\n            # recreate server socket\n            self.server.close()\n            self.open_socket()\n            self.poller.register(self.server, self.pollmask)\n        else:\n            # close the socket\n            self.clients[socket].close()\n            del self.clients[socket]\n\n    '''\n    Handle client connection to server\n    '''\n    def handleServer(self):\n        (client, address) = self.server.accept()\n        self.clients[client.fileno()] = client\n        self.poller.register(client.fileno(), self.pollmask)\n\n    '''\n    Handle client request to server\n    '''\n    def handleClient(self, socket):\n        data = self.clients[socket].recv(self.size)\n        if data:\n            self.clients[socket].send(data)\n        else:\n            self.poller.unregister(socket)\n            self.clients[socket].close()\n            del self.clients[socket]\n\n\nif __name__ == \"__main__\":\n    s = Server(8080)\n    s.loadConfiguration()\n",
			"file": "pollingServer.py",
			"file_size": 4032,
			"file_write_time": 130269274686440000,
			"settings":
			{
				"buffer_size": 3926,
				"line_ending": "Unix"
			}
		},
		{
			"file": "web.conf",
			"settings":
			{
				"buffer_size": 142,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/parallels/School/CS-360/labs/python-mt-downloader/downloadAccelerator.py",
			"settings":
			{
				"buffer_size": 4835,
				"line_ending": "Unix"
			}
		},
		{
			"file": "configuration.py",
			"settings":
			{
				"buffer_size": 48,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 222.0,
		"selected_items":
		[
			[
				"disa",
				"Package Control: Disable Package"
			],
			[
				"togg",
				"View: Toggle Minimap"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"got",
				"Goto Documentation"
			]
		],
		"width": 568.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/parallels/School/CS-360/labs/httPyServer/httPyServer.sublime-project",
		"/home/parallels/.config/sublime-text-3/Packages/SublimeCodeIntel/README.rst",
		"/home/parallels/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/parallels/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings"
	],
	"find":
	{
		"height": 25.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"configurationMethods",
			"configureParameter",
			"configureMediaType",
			"configureDomain",
			"word"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pollingServer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3926,
						"regions":
						{
						},
						"selection":
						[
							[
								181,
								181
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 47.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "web.conf",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 142,
						"regions":
						{
						},
						"selection":
						[
							[
								142,
								142
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/parallels/School/CS-360/labs/python-mt-downloader/downloadAccelerator.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4835,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 3,
					"file": "configuration.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 48,
						"regions":
						{
						},
						"selection":
						[
							[
								48,
								48
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": true,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"PyWin32",
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": true,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 251.0
	},
	"output.gotodocumentation":
	{
		"height": 200.0
	},
	"project": "httPyServer.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 220.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
